CREATE TABLE American_Cuisine(
item_id SERIAL PRIMARY KEY,
cuisine_id INT REFERENCES cuisine(cuisine_id),
variety_id INT REFERENCES variety(variety_id),
item_name VARCHAR(50),
item_image BYTEA
)


//Form to take the input from user
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Submit Recipe</title>
</head>
<body>
    <form action="/submit-recipe" method="POST" enctype="multipart/form-data">
        <label for="item_name">Recipe Name:</label>
        <input type="text" id="item_name" name="item_name"><br><br>
        
        <label for="ingredients">Ingredients (comma separated):</label>
        <input type="text" id="ingredients" name="ingredients"><br><br>
        
        <label for="recipe_steps">Recipe Steps (semicolon separated):</label>
        <input type="text" id="recipe_steps" name="recipe_steps"><br><br>
        
        <label for="item_image">Image:</label>
        <input type="file" id="item_image" name="item_image"><br><br>
        
        <button type="submit">Submit Recipe</button>
    </form>
</body>
</html>
















import express from 'express';
import pg from 'pg';
import bodyParser from 'body-parser';
import multer from 'multer';
import path from 'path';
import { fileURLToPath } from 'url';

const app = express();
const port = 3000;

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

app.use(express.static(path.join(__dirname, 'public')));
app.use(bodyParser.urlencoded({ extended: true }));
app.use(bodyParser.json());

const storage = multer.memoryStorage();
const upload = multer({ storage: storage });

const db = new pg.Client({
    user: 'postgres',
    host: 'localhost',
    database: 'tasty_tales',
    password: 'password',
    port: 5432,
});

db.connect();

app.get('/', (req, res) => {
    res.render('index.ejs');
});

app.post('/submit-recipe', upload.single('item_image'), async (req, res) => {
    try {
        const { item_name, ingredients, recipe_steps } = req.body;
        const item_image = req.file.buffer;

        const ingredientsJSON = JSON.stringify(ingredients.split(',').map(i => i.trim()));
        const recipeStepsJSON = JSON.stringify(recipe_steps.split(';').map(s => s.trim()));

        await db.query(
            'INSERT INTO recipes (item_name, item_image, ingredients, recipe_steps) VALUES ($1, $2, $3, $4)',
            [item_name, item_image, ingredientsJSON, recipeStepsJSON]
        );

        res.send('Recipe submitted successfully!');
    } catch (err) {
        console.error(err);
        res.status(500).send('Internal Server Error');
    }
});

app.listen(port, () => {
    console.log(`Successfully created port on ${port}`);
});




















<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Document</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet"
        integrity="sha384-QWTKZyjpPEjISv5WaRU9OFeRpok6YctnYmDr5pNlyT2bRjXh0JMhjY6hW+ALEwIH" crossorigin="anonymous">
    <link rel="stylesheet" href="/css/styles/style.css">
    <link rel="stylesheet" href="/css/styles/cuisine.css">
</head>
<style>
    .form-group{
        font-size: 13pt;
        color:black;
        font-weight: 500;
    }
    .form-control{
        border: 1px solid black;
    }
    .title{
        font-weight: 400;
        font-size: 20pt;
    }
</style>
<body>
    <%- include("./partials/header.ejs") %>



    <div class="container mt-5">
        <h1 class="text-center mb-4">Submit Your Recipe</h1>
        <div id="success-alert" class="alert alert-success d-none" role="alert">
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            Form submitted successfully!
        </div>
        <form id="recipe-form" method="POST" action="" enctype="multipart/form-data" onsubmit="myfunc()">
            <div class="form-group">
                <label for="recipe-title" class="pb-1">Recipe Title</label>
                <input type="text" class="form-control title" id="recipe-title" name="recipeTitle" required
                value="<% if(modify){%><%= recipeTitle %><% } %>">
            </div>
            <div class="form-group mt-3">
                <label for="recipe-image" class="pb-1">Recipe Image </label>
                <!-- <input type="url" class="form-control" id="recipe-image" name="recipe-image"> -->
                <input type="file" id="fileupload" name="recipeImage" accept="image/*" required/>
            </div>
            <div class="form-group mt-3">
                <label for="cuisine-type" class="pb-1">Cuisine Type</label>
                <select class="form-control" id="cuisine-type" name="cuisine" required>
                    <option value="Indian"><%= cuisineName %> </option>
                        <!-- <option value="Italian">Italian</option>
                        <option value="Mexican">Mexican</option>
                        <option value="Chinese">Chinese</option>
                        <option value="American">American</option> -->
                </select>
                
            </div>
            <div class="form-group mt-3">
                <label for="ingredients" class="pb-1">Ingredients (one per line)</label>
                <div id="line-numbers-instructions" class="line-numbers"></div>
                <textarea class="form-control" id="ingredients" name="ingredients" rows="6" required onkeydown="updateIngredients(event)" >
<% if(modify){ %><% for(let i=0;i<ingredients.length;i++) {%><%= i+1 %>) <%= ingredients[i]%>
<% }; %><% } %>
                </textarea>
            </div>
            <div class="form-group mt-3">
                <label for="instructions" class="pb-1">Directions (one step per line)</label>
                <textarea class="form-control" id="instructions" name="instructions" rows="8" required onkeydown="updateInstructions(event)">
<% if(modify){ %><% for(let i=0;i<steps.length;i++) {%><%= i+1 %>) <%= steps[i]%>
<% }; %><% } %>
                </textarea>
            </div>
            <div class="form-group mt-3">
                <label for="nutrition-facts" class="pb-1">Nutrition Facts (optional)</label>
                <textarea class="form-control" id="nutrition-facts" name="nutritionFacts" rows="4"></textarea>
            </div>
            <div class="form-group text-center mt-5">
                <button type="submit" class="btn btn-primary btn-lg">Submit Recipe</button>
            </div>
        </form>
    </div>

    <%- include ("./partials/footer.ejs") %>
  
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Domine:wght@400..700&display=swap" rel="stylesheet">
      <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Lato:ital,wght@0,100;0,300;0,400;0,700;0,900;1,100;1,300;1,400;1,700;1,900&family=Playball&display=swap" rel="stylesheet">
      <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Playball&display=swap" rel="stylesheet">
      <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-YvpcrYf0tY3lHB60NNkmXc5s9fDVZLESaAA55NDzOxhy9GkcIdslK1eN7N6jIeHz" crossorigin="anonymous"></script>




      <script>
        function updateIngredients(event){
            var count=1;
            var userInput = document.getElementById("ingredients").value;
            for(let i=0;i<userInput.length;i++){
                if(userInput[i]=="\n"){
                    count++;
                }
            }
            if(event.key=="Enter" || userInput===""){
                if(userInput===""){
                    var concatenatedResult =  userInput + count +". " ; 
                }
                else{
                    count++;
                var concatenatedResult =  userInput +"\n"+ count +". " ;
                }
                // console.log(concatenatedResult);
                // concatenatedResult= concatenatedResult.slice(0,-1);
                document.getElementById('ingredients').value = concatenatedResult;
                // console.log((count))
                count=count+1;
                if (event.keyCode === 13 && !event.shiftKey) {
        // Prevent the default behavior of inserting a newline
                    event.preventDefault();
        
        // Optionally, you can handle other behavior here (e.g., submit form)
        // For example, uncomment the line below to submit a form on Enter
        // this.form.submit();
      }
                // console.log(concatenatedResult.length)
            }
            
        }



        function updateInstructions(event){
            var count=1;
            var userInput = document.getElementById("instructions").value;
            for(let i=0;i<userInput.length;i++){
                if(userInput[i]=="\n"){
                    count++;
                }
            }
            if(event.key=="Enter" || userInput===""){
                if(userInput===""){
                    var concatenatedResult =  userInput + count +". " ; 
                }
                else{
                    count++;
                var concatenatedResult =  userInput +"\n"+ count +". " ;
                }
                // console.log(concatenatedResult);
                // concatenatedResult= concatenatedResult.slice(0,-1);
                document.getElementById('instructions').value = concatenatedResult;
                // console.log((count))
                count=count+1;
                if (event.keyCode === 13 && !event.shiftKey) {
        // Prevent the default behavior of inserting a newline
                    event.preventDefault();
        
        // Optionally, you can handle other behavior here (e.g., submit form)
        // For example, uncomment the line below to submit a form on Enter
        // this.form.submit();
      }
                // console.log(concatenatedResult.length)
            }
            
        }
        
        const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('success') === 'true') {
        document.getElementById('success-alert').classList.remove('d-none');
        setTimeout(()=>{
            document.getElementById('success-alert').classList.add('d-none');
        },3000);
    }

      </script>
</body>
</html>